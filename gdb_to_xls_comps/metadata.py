"""
Read complex metadata from geodatabases, datasets, and fields.
"""

import os
import re
import xml.etree.ElementTree as ET
from typing import Union

import arcpy

_METADATAS:dict[str, arcpy.metadata.Metadata] = {}
_FGDC_XML:dict[arcpy.metadata.Metadata, ET.Element] = {}
_RAW_XML:dict[arcpy.metadata.Metadata, ET.Element] = {}


def get_description(describe:object)->Union[str, None]:
    """Get a geodatabase or dataset's (feature class, feature dataset, table, relationship class, etc) description.

    Args:
        item (object): ArcPy Describe object for the

    Returns:
        Union[str, None]: Either the description or None if no description found.
    """
    meta = _get_meta(describe)

    # Try metadata class
    if meta.summary:
        return meta.summary

    if meta.description:
        return _strip_html_tags(meta.description)

    # Look for an abstract in the FDGC metadata
    abstract = _get_fgdc_abstract(meta)
    if abstract:
        return abstract

    # Look for X-Ray style metadata
    abstract = _get_xray_abstract(meta)
    if abstract:
        return abstract

    return None


def get_field_description(field:object, table:object)->Union[str, None]:
    """Get a field's description.

    Args:
        field (object): The field class.
        table (object): The parent table's describe object.

    Returns:
        Union[str, None]: Either the description or None if no description found.
    """
    meta = _get_meta(table)
    xml = _get_fgdc_xml(meta)
    descript = None

    all_attributes = xml.getroot().findall(".//eainfo/detailed/attr")
    for attr in all_attributes:
        if attr.find("attrlabl").text == field.name:
            udom = attr.find(".//udom")
            if udom is not None:
                descript = udom.text

            attrdef = attr.find("attrdef")
            if attrdef is not None:
                descript = attrdef.text

            break

    return descript


def _get_meta(describe:object)->arcpy.metadata.Metadata:
    """Get the metadata class for the item.

    Args:
        describe (object): Item's ArcPy describe object.

    Returns:
        object: arcpy.Metadata class.
    """
    path = describe.catalogPath

    if path not in _METADATAS:
        _METADATAS[path] = arcpy.metadata.Metadata(path)

    return _METADATAS[path]


def _get_fgdc_xml(meta:arcpy.metadata.Metadata)->ET.ElementTree:
    """Get the FGDC formatted XML metadata.

    Args:
        meta (arcpy.metadata.Metadata): Metadata object to be exported

    Returns:
        ET.ElementTree: XML tree for the metadata
    """

    if meta not in _FGDC_XML:
        # pylint: disable-next=no-member
        path = arcpy.CreateUniqueName("FGDC_Metadata.xml", arcpy.env.scratchFolder)
        meta.exportMetadata(path, "FGDC_CSDGM", 'EXACT_COPY')
        _FGDC_XML[meta] = ET.parse(path)
        os.remove(path)

    return _FGDC_XML[meta]


def _get_raw_xml(meta:arcpy.metadata.Metadata)->ET.ElementTree:
    """Get the raw metadata XML for detailled analysis.

    Args:
        meta (arcpy.metadata.Metadata): Metadata object to be exported.

    Returns:
        ET.ElementTree: XML tree for the metadata.
    """

    if meta not in _RAW_XML:
        # pylint: disable-next=no-member
        path = arcpy.CreateUniqueName("Raw_Metadata.xml", arcpy.env.scratchFolder)
        meta.saveAsXML(path, "EXACT_COPY")
        _RAW_XML[meta] = ET.parse(path)
        os.remove(path)

    return _RAW_XML[meta]


def _get_fgdc_abstract(meta:arcpy.metadata.Metadata)->Union[str, None]:
    """Get the abstract tag from the FGDC standard describing the dataset or database.

    Args:
        meta (arcpy.metadata.Metadata): Metadata object to be searched.

    Returns:
        Union[str, None]: Either the abstract or None if nothing found.
    """
    abstract = None

    xml = _get_fgdc_xml(meta)
    abstract_tags = xml.getroot().findall(".//descript/abstract")

    if abstract_tags:
        abstract = abstract_tags[0].text

    return abstract



def _get_xray_abstract(meta:arcpy.metadata.Metadata)->Union[str, None]:
    """Get the abstract tag generated by X-Ray data describing the dataset or database.

    Args:
        meta (arcpy.metadata.Metadata): Metadata object to be searched.

    Returns:
        Union[str, None]: Either the abstract or None if nothing found.
    """
    abstract = None

    xml = _get_raw_xml(meta)
    abstract_tags = xml.getroot().findall(".//abstract")

    if abstract_tags:
        abstract = abstract_tags[0].text

    return abstract


def _strip_html_tags(source:str)->str:
    """Strip the HTML tags out of a string.

    Args:
        source (str): String with HTML tags.

    Returns:
        str: String with HTML tags removed.
    """

    pattern = "<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+>"
    return re.sub(pattern, "", source)